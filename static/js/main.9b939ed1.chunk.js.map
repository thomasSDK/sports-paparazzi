{"version":3,"sources":["emoji.js","App.js","serviceWorker.js","index.js"],"names":["Emoji","width","emojiCode","this","code","x","Math","random","y","speed","scale","emojiCanvas","emojiContext","superagent","require","emojiURL","simpleGet","options","get","url","then","res","onSuccess","emojiCodes","emojis","draw","clearRect","height","forEach","emoji","i","font","fillText","splice","window","requestAnimationFrame","body","filter","subGroup","map","character","setInterval","push","min","max","length","ceil","floor","photosUrl","App","size","useWindowSize","useState","photos","setPhotos","canvasRef","useRef","useEffect","console","log","canvas","getContext","dpr","devicePixelRatio","rect","getBoundingClientRect","init","current","StyledApp","StyledCanvas","ref","Reflection","title","alt_description","image","urls","regular","StyledImage","src","alt","TitleText","description","href","user","portfolio_url","Name","name","styled","div","h1","p","img","props","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gRAAqBA,E,WACnB,WAAYC,EAAOC,GAAY,oBAC7BC,KAAKC,KAAOF,EACZC,KAAKE,EAAIC,KAAKC,UAAYN,EAAQ,GAAK,EACvCE,KAAKK,EAAI,EACTL,KAAKM,MAAQ,IAAAH,KAAKC,SAAuB,GACzCJ,KAAKO,MAAQ,GAAAJ,KAAKC,SAAuB,G,mDAIzCJ,KAAKK,GAAKL,KAAKM,U,w4CCNnB,IAqBIE,EACAC,EAtBEC,EAAaC,EAAQ,IAUrBC,EAAQ,UAHM,4DAGN,OAFK,4CAIbC,EAAY,SAACC,GACjBJ,EAAWK,IAAID,EAAQE,KAAKC,MAAK,SAAUC,GACrCJ,EAAQK,WAAWL,EAAQK,UAAUD,OAKzCE,EAAa,GACXC,EAAS,GAqCf,SAASC,IACPb,EAAac,UAAU,EAAG,EAAGf,EAAYV,MAAOU,EAAYgB,QAE5DH,EAAOI,SAAQ,SAACC,EAAOC,GACrBlB,EAAamB,KAAb,UAAuBF,EAAMnB,MAA7B,iBACAE,EAAaoB,SAASH,EAAMzB,KAAMyB,EAAMxB,EAAGwB,EAAMrB,GACjDqB,EAAMJ,OAEFI,EAAMrB,EAAIG,EAAYgB,QACxBH,EAAOS,OAAOH,EAAG,MAIrBI,OAAOC,sBAAsBV,GA9C/BT,EAAU,CACRG,IAAKJ,EACLO,UAAW,SAACD,GACVE,EAAaF,EAAIe,KACdC,QAAO,SAACR,GAAD,MAA8B,iBAAnBA,EAAMS,YACxBC,KAAI,SAACV,GAAD,OAAWA,EAAMW,aACxBC,aACE,kBACEjB,EAAOkB,KACL,IAAI1C,EACFW,EAAYV,MACZsB,GDzBiBoB,ECyBO,EDzBFC,ECyBKrB,EAAWsB,ODxBhDF,EAAMrC,KAAKwC,KAAKH,GAChBC,EAAMtC,KAAKyC,MAAMH,GACVtC,KAAKyC,MAAMzC,KAAKC,UAAYqC,EAAMD,IAAQA,MAHvB,IAACA,EAAKC,IC4B5B,QAoCN,IAAMI,EAAS,UAtEb,+FAsEa,OArEU,+CAqHVC,MA9Cf,WACE,IAAMC,EAAOC,cADA,EAEeC,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,KAGTC,EAAYC,mBAehB,OAZAC,qBAAU,WACRzC,EAAU,CACRG,IAAK6B,EACL1B,UAAW,SAACD,GACViC,EAAUjC,EAAIe,MACdsB,QAAQC,IAAItC,EAAIe,SA5CxB,SAAcwB,GACZjD,EAAciD,EACdhD,EAAegD,EAAOC,WAAW,MAGjC,IAAIC,EAAM5B,OAAO6B,kBAAoB,EACjCC,EAAOrD,EAAYsD,wBAEvBtD,EAAYV,MAAQ+D,EAAK/D,MAAQ6D,EACjCnD,EAAYgB,OAASqC,EAAKrC,OAASmC,EACnClD,EAAaF,MAAMoD,EAAKA,GACxB5B,OAAOC,sBAAsBV,GAqC3ByC,CAAKX,EAAUY,WACd,IAGD,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAcC,IAAKf,IACA,IAAlBF,EAAOR,OACNa,QAAQC,IAAI,gBAEZ,oCACE,kBAACY,EAAD,CACE5C,OAAsB,GAAduB,EAAKvB,OACb1B,MAAqB,GAAdiD,EAAKvB,OAAe,GAC3B6C,MAAOnB,EAAO,GAAGoB,gBACjBC,MAAOrB,EAAO,GAAGsB,KAAKC,UAGxB,kBAACC,EAAD,CACEC,IAAKzB,EAAO,GAAGsB,KAAKC,QACpBG,IAAK1B,EAAO,GAAGoB,kBAEjB,kBAACO,EAAD,KAAY3B,EAAO,GAAG4B,aACtB,uBAAGC,KAAM7B,EAAO,GAAG8B,KAAKC,eACtB,kBAACC,EAAD,SAAQhC,EAAO,GAAG8B,KAAKG,UAY7BlB,EAAYmB,IAAOC,IAAV,KAQTnB,EAAekB,IAAO3B,OAAV,KAMZoB,EAAYO,IAAOE,GAAV,KAKTJ,EAAOE,IAAOG,EAAV,KAKJb,EAAcU,IAAOI,IAAV,KAIXpB,EAAagB,IAAOC,IAAV,KACL,SAACI,GAAD,OAAWA,EAAM3F,SAChB,SAAC2F,GAAD,OAAWA,EAAMjE,UAET,SAACiE,GAAD,OAAWA,EAAMlB,SCtJjBmB,QACW,cAA7B3D,OAAO4D,SAASC,UAEe,UAA7B7D,OAAO4D,SAASC,UAEhB7D,OAAO4D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.9b939ed1.chunk.js","sourcesContent":["export default class Emoji {\n  constructor(width, emojiCode) {\n    this.code = emojiCode;\n    this.x = Math.random() * (width - 0) + 0;\n    this.y = 0;\n    this.speed = Math.random() * (2 - 0.5) + 0.5;\n    this.scale = Math.random() * (50 - 20) + 20;\n  }\n\n  draw() {\n    this.y += this.speed;\n  }\n}\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useWindowSize } from \"react-hooks-window-size\";\nimport Emoji, { getRandomInt } from \"./emoji\";\nconst superagent = require(\"superagent\");\n\n// Split  to allow for greater flexibility in the request\nconst unSplashURL =\n  \"https://api.unsplash.com/photos/random/?count=1&query=sport&orientation=portrait&client_id=\";\nconst unSplashClientID = \"eK3hqxpfSE979oi91j3VGsUERwEEj3YvGIOifB_5hfE\";\n\nconst emojiApiURL = \"https://emoji-api.com/categories/people-body?access_key=\";\nconst emojiApiID = \"a81343835b9c7558bb80968e11728528a3f8384a\";\n\nconst emojiURL = `${emojiApiURL}${emojiApiID}`;\n\nconst simpleGet = (options) => {\n  superagent.get(options.url).then(function (res) {\n    if (options.onSuccess) options.onSuccess(res);\n  });\n};\n\n// Would be good to make this into an object\nlet emojiCodes = [];\nconst emojis = [];\nlet emojiCanvas;\nlet emojiContext;\n\nsimpleGet({\n  url: emojiURL,\n  onSuccess: (res) => {\n    emojiCodes = res.body\n      .filter((emoji) => emoji.subGroup === \"person-sport\")\n      .map((emoji) => emoji.character);\n    setInterval(\n      () =>\n        emojis.push(\n          new Emoji(\n            emojiCanvas.width,\n            emojiCodes[getRandomInt(0, emojiCodes.length)]\n          )\n        ),\n      500\n    );\n  },\n});\n\nfunction init(canvas) {\n  emojiCanvas = canvas;\n  emojiContext = canvas.getContext(\"2d\");\n\n  //https://www.html5rocks.com/en/tutorials/canvas/hidpi/\n  var dpr = window.devicePixelRatio || 1;\n  var rect = emojiCanvas.getBoundingClientRect();\n\n  emojiCanvas.width = rect.width * dpr;\n  emojiCanvas.height = rect.height * dpr;\n  emojiContext.scale(dpr, dpr);\n  window.requestAnimationFrame(draw);\n}\n\nfunction draw() {\n  emojiContext.clearRect(0, 0, emojiCanvas.width, emojiCanvas.height); // clear canvas\n\n  emojis.forEach((emoji, i) => {\n    emojiContext.font = `${emoji.scale}px sans-serif`;\n    emojiContext.fillText(emoji.code, emoji.x, emoji.y);\n    emoji.draw();\n\n    if (emoji.y > emojiCanvas.height) {\n      emojis.splice(i, 1);\n    }\n  });\n\n  window.requestAnimationFrame(draw);\n}\n\n// Pull into the react component to react to different screen widths\nconst photosUrl = `${unSplashURL}${unSplashClientID}`;\n\nfunction App() {\n  const size = useWindowSize();\n  const [photos, setPhotos] = useState([]);\n  let canvasRef = useRef();\n\n  // Unsplash\n  useEffect(() => {\n    simpleGet({\n      url: photosUrl,\n      onSuccess: (res) => {\n        setPhotos(res.body);\n        console.log(res.body);\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    init(canvasRef.current);\n  }, []);\n\n  return (\n    <StyledApp>\n      <StyledCanvas ref={canvasRef} />\n      {photos.length === 0 ? (\n        console.log(\"Loading time\")\n      ) : (\n        <>\n          <Reflection\n            height={size.height * 0.5}\n            width={size.height * 0.5 * 0.6}\n            title={photos[0].alt_description}\n            image={photos[0].urls.regular}\n          />\n          {/* Image does not display but left in for accessibility */}\n          <StyledImage\n            src={photos[0].urls.regular}\n            alt={photos[0].alt_description}\n          />\n          <TitleText>{photos[0].description}</TitleText>\n          <a href={photos[0].user.portfolio_url}>\n            <Name>@{photos[0].user.name}</Name>\n          </a>\n        </>\n      )}\n    </StyledApp>\n  );\n}\n\nexport default App;\n\n// CSS\n\nconst StyledApp = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledCanvas = styled.canvas`\n  position: absolute;\n  height: 100vh;\n  width: 100vw;\n`;\n\nconst TitleText = styled.h1`\n  font-family: Moonhouse, serif;\n  z-index: 1;\n`;\n\nconst Name = styled.p`\n  position: relative;\n  z-index: 1;\n`;\n\nconst StyledImage = styled.img`\n  display: none;\n`;\n\nconst Reflection = styled.div`\n  width: ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n  position: relative;\n  background:url(\"${(props) => props.image}\");\n  background-position: bottom;\n  background-size: cover;\n  box-shadow: 0px 50px 70px rgba(0,0,0,0.3),\n              0px 10px 10px rgba(0,0,0,0.1);\n  &:after {\n    content:\"\";\n    background-image: inherit;\n    width:inherit;\n    height:40%;\n    position: absolute;\n    bottom:-41%;\n    transform: scaleY(-1);\n    background-position: bottom;\n    background-size: cover;\n    opacity: 0.5;\n  }\n  &:before {\n    content:\"\";\n    width:inherit;\n    height: 42%;\n    position: absolute;\n    bottom: -42%;\n    background: linear-gradient(to bottom, rgba(255,255,255,0.3),white);\n    z-index: 1;\n    \n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}